#!/bin/sh
# Prime Mover build script
#
# Â© 2006 David Given.
# Prime Mover is licensed under the MIT open source license. To get the full
# license text, see the README file.
#
# $Id$

set -e

TEMPFILE=/tmp/build.$$
INTERPRETER=$TEMPFILE.c

embed() {
	cat > $TEMPFILE
	echo "XXXXSTART$1"
	wc -c $TEMPFILE | cut -d' ' -f1
	cat $TEMPFILE
	echo ""
}

prepare_engine() {
	(
		cd lua
		lua ../build-tools/collapse.lua *.c > $TEMPFILE.1.c
		lua ../build-tools/tokenmapper.lua $TEMPFILE.1.c ../build-tools/safe-tokens.lst > $TEMPFILE.tokenmap
		lua ../build-tools/ccruncher.lua $TEMPFILE.1.c $TEMPFILE.tokenmap > $TEMPFILE.c
	)
}

make_engine() {
	lua build-tools/luasrcdiet/LuaSrcDiet.lua --quiet src/pm.lua -o $TEMPFILE.lua
	cat $TEMPFILE.lua
}
	
make_interpreter() {
	cat $TEMPFILE.c
}

make_pm() {
	echo "Making $3..."
	
	sed -e "s!XXXEXTRACTORXXX!$2!" < src/shell.sh > $TEMPFILE.stub
	stat -t $TEMPFILE.stub > $TEMPFILE
	read _ stubsize _ < $TEMPFILE
	
	make_engine | sh -c "$1" > $TEMPFILE.engine
	stat -t $TEMPFILE.engine > $TEMPFILE
	read _ enginesize _ < $TEMPFILE
	
	make_interpreter | sh -c "$1" > $TEMPFILE.interpreter
	stat -t $TEMPFILE.interpreter > $TEMPFILE
	read _ interpretersize _ < $TEMPFILE
	
	mkdir -p bin
	(
		i=$(expr $stubsize + $enginesize)
		sed -e "s!XXXXLO!$(printf '%-6d' $stubsize)!" \
		    -e "s!XXXXLS!$(printf '%-6d' $enginesize)!" \
		    -e "s!XXXXCO!$(printf '%-6d' $i)!" \
		    -e "s!XXXXCS!$(printf '%-6d' $interpretersize)!" \
		    < $TEMPFILE.stub
		cat $TEMPFILE.engine
		cat $TEMPFILE.interpreter
	) > bin/$3
	chmod a+rx bin/$3
}

run_unit_test() {
	echo "Running test $1..."
	rm -f ERROR RESULT OUT DATA*
	# Strange next line to prevent failures on error condition.
	( ../bin/pm_uncompressed -p -f "$1" 2> ERROR 1>&2 ) && true
	touch OUT
	[ -f ERROR ] && (cat ERROR >> OUT)
	[ -f RESULT ] && (cat RESULT >> OUT)
	if ! diff -uN OUT "${1%.pm}.good"; then
		echo "Test failed"
		exit 1
	fi
	rm -f ERROR RESULT OUT DATA*
}

echo "Crunching interpreter..."
prepare_engine

make_pm "cat" "cat" "pm_uncompressed"
make_pm "gzip -9c" "zcat" "pm_8bit"
make_pm "gzip -9c | uuencode out" "uudecode -o /dev/stdout | zcat" "pm_7bit"

cd tests
../bin/pm_uncompressed -p -f startup.pm
for n in *.pm; do
	run_unit_test "$n"
done
